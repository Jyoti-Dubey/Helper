# android-recylerview
Build.gradle
    
    //Volley
    compile 'com.android.volley:volley:1.0.0'

    
    
Manifest.xml
<uses-permission android:name="android.permission.INTERNET"/>
<uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/>

Activity File    
//call code
private void callWS() {
        if (!isNetworkAvailable(context)) {
            RequestQueue mRequestQueue;
            StringRequest stringRequest = new StringRequest(Request.Method.POST, URL
                    new Response.Listener<String>() {
                        @Override
                        public void onResponse(String response) {
                        }
                    },
                    new Response.ErrorListener() {
                        @Override
                        public void onErrorResponse(VolleyError error) {
                            error.printStackTrace();
                        }
                    }) {
                @Override
                protected Map<String, String> getParams() {
               /* Map<String, String> param = new HashMap<String, String>();
                String data = encodeKeyValues(strParams);
                param.put("data", data);
                Loger.d(TAG,"Data :: "+data);*/
                    return HASHMAP;
                }
            };
            mRequestQueue = Volley.newRequestQueue(context);
            RetryPolicy policy = new DefaultRetryPolicy(15000 /*SECONDS*/, 1, DefaultRetryPolicy.DEFAULT_BACKOFF_MULT);
            stringRequest.setRetryPolicy(policy);
           
            mRequestQueue.add(stringRequest);
        } else {
            Toast.makeText(context, "No internet connection", Toast.LENGTH_SHORT).show();
        }

    }

    /**
     * this method will check internet connection is available or not
     *
     * @param context
     * @return
     ***/
    public static boolean isNetworkAvailable(Context context) {
        ConnectivityManager connectivityManager = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
        NetworkInfo activeNetworkInfo = connectivityManager.getActiveNetworkInfo();
        return activeNetworkInfo != null && activeNetworkInfo.isConnected();
    }//end of isNetworkAvailable

 ---------------------------------------------------------smallest and largest from array----------------------         
   public class FindLargestSmallestNumber {
 
	public static void main(String[] args) {
		
		//array of 10 numbers
		int numbers[] = new int[]{32,43,53,54,32,65,63,98,43,23};
		
		//assign first element of an array to largest and smallest
		int smallest = numbers[0];
		int largetst = numbers[0];
		
		for(int i=1; i< numbers.length; i++)
		{
			if(numbers[i] > largetst)
				largetst = numbers[i];
			else if (numbers[i] < smallest)
				smallest = numbers[i];
			
		}
		
		System.out.println("Largest Number is : " + largetst);
		System.out.println("Smallest Number is : " + smallest);
	}
}


-----------------------------------factorial---------------------------------------------------
public class NumberFactorial {
 
	public static void main(String[] args) {
		
		int number = 5;
		
		/*
		 * Factorial of any number is !n. 
		 * For example, factorial of 4 is 4*3*2*1.
		*/
		
		int factorial = number;
		
		for(int i =(number - 1); i > 1; i--)
		{
			factorial = factorial * i;
		}
	
		System.out.println("Factorial of a number is " + factorial);
	}
}

--------------------------------------------------------Reverse number---------------------------------------
public class ReverseNumber {
 
	public static void main(String[] args) {
		
		//original number
		int number = 1234;
		int reversedNumber = 0;
		int temp = 0;
		
		while(number > 0){
			
			//use modulus operator to strip off the last digit
			temp = number%10;
			
			//create the reversed number
			reversedNumber = reversedNumber * 10 + temp;
			number = number/10;
			 
		}
		
		//output the reversed number
		System.out.println("Reversed Number is: " + reversedNumber);
	}
}
